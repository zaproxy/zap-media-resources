1
00:00:00,000 --> 00:00:10,760
Hello, and welcome to another episode of ZAP Chat with myself and Yiannis.

2
00:00:11,360 --> 00:00:11,920
Hello.

3
00:00:13,480 --> 00:00:19,700
So last week, we talked about Google Summer of Code, and we're going to carry on talking

4
00:00:19,700 --> 00:00:23,940
about Google Summer of Code, but that's going to come a bit later because we're actually

5
00:00:23,940 --> 00:00:28,260
going to talk about something else first, and it's a topic for the whole of this episode,

6
00:00:28,260 --> 00:00:32,660
and it's something we hope that everyone who uses ZAP will be interested in.

7
00:00:33,200 --> 00:00:38,340
So this is a potential new web interface for ZAP.

8
00:00:39,000 --> 00:00:48,680
So this is something we're talking about with the team, and we want to get feedback from

9
00:00:48,680 --> 00:00:51,560
the community, you lot, people watching this show.

10
00:00:52,240 --> 00:00:57,980
So the idea is that Google Summer of Code, as we talked about last week,

11
00:00:58,260 --> 00:01:02,900
we get contributors paid by Google over the summer to work on ZAP features,

12
00:01:03,000 --> 00:01:06,600
and we've had some key ZAP features implemented over the years.

13
00:01:07,040 --> 00:01:13,100
So one of the projects this year we've proposed is a new web-based GUI,

14
00:01:13,580 --> 00:01:18,120
and we wanted to go into that in more detail in this episode.

15
00:01:19,540 --> 00:01:26,040
So kind of the first question you may have is, why do we want a new web-based GUI?

16
00:01:27,160 --> 00:01:28,100


17
00:01:28,100 --> 00:01:28,240


18
00:01:28,260 --> 00:01:30,060
Why not stick with the GUI that we already have, right?

19
00:01:30,460 --> 00:01:30,880
Exactly.

20
00:01:31,560 --> 00:01:33,620
So ZAP has two GUIs already.

21
00:01:34,060 --> 00:01:39,360
We've got the swing-based GUI, which is looking a little bit old,

22
00:01:39,900 --> 00:01:44,660
but is very thorough and covers all of ZAP functionality.

23
00:01:45,240 --> 00:01:51,900
Then we have the HUD, the heads-up display, which brings ZAP into the browser.

24
00:01:52,800 --> 00:01:58,180
Now, the HUD is very innovative, and we still don't know of anything like it,

25
00:01:58,260 --> 00:02:03,440
but it's proved it's not the easiest thing to maintain,

26
00:02:03,560 --> 00:02:06,800
and we know some people like it, but it's not had a huge take-up.

27
00:02:08,200 --> 00:02:11,900
With the swing-based GUI, we know some people do like it,

28
00:02:12,240 --> 00:02:14,340
and we know some people really don't like it.

29
00:02:14,960 --> 00:02:18,880
So what we've been talking about within the team is what options we have.

30
00:02:20,060 --> 00:02:25,280
Now, Yiannis, do you know of any innovations in Java and GUIs recently?

31
00:02:25,280 --> 00:02:28,240
Well, that was going to be my comment.

32
00:02:28,260 --> 00:02:35,100
It's not that we are using swing because there's a better option out there,

33
00:02:35,980 --> 00:02:43,000
and Sun and then Oracle have kind of given up on the whole evolution of web-based,

34
00:02:43,380 --> 00:02:47,180
oh, sorry, swing-based features and GUIs.

35
00:02:47,360 --> 00:02:51,260
So swing was designed back in the early 2000s.

36
00:02:51,980 --> 00:02:54,600
It was, you know, features were being added, et cetera, et cetera,

37
00:02:54,600 --> 00:02:58,200
but there isn't really a next version out there.

38
00:02:58,200 --> 00:02:58,240
Okay.

39
00:02:58,240 --> 00:03:03,760
There isn't a feature of UI libraries that we could be using.

40
00:03:04,680 --> 00:03:09,020
And it might be old and dated, but still, Eclipse is one example, right?

41
00:03:09,080 --> 00:03:10,940
The IDE is using swing.

42
00:03:11,400 --> 00:03:14,740
And the problem that we had when we did the research, in answer to your question,

43
00:03:14,860 --> 00:03:18,840
was that there wasn't another set of libraries or, I mean,

44
00:03:18,860 --> 00:03:22,360
the only thing that came up was JavaFX, and that's been discontinued as well.

45
00:03:22,360 --> 00:03:27,940
So, therefore, you have kind of stuck with this technology that's 20 years old,

46
00:03:28,240 --> 00:03:32,560
still works, but has nothing to compare it with, you know,

47
00:03:32,560 --> 00:03:37,180
let's say the features that we have on mobile applications or anything similar.

48
00:03:37,780 --> 00:03:45,280
So I think that's really what's driving the web-based UI,

49
00:03:45,640 --> 00:03:51,000
and also the element of decluttering a little bit and just picking specific

50
00:03:51,000 --> 00:03:54,080
functionalities that we offer in the web-based UI.

51
00:03:55,160 --> 00:03:58,060
The swing-based GUI will continue to be,

52
00:03:58,240 --> 00:04:01,960
the main driver of anything that you want to do.

53
00:04:02,340 --> 00:04:04,820
I think, you know, that makes sense.

54
00:04:05,480 --> 00:04:08,860
And for advanced users, it's probably the one to be using.

55
00:04:09,260 --> 00:04:12,260
But when it comes to the web-based UI,

56
00:04:12,460 --> 00:04:14,900
there's a couple of things that we can do and do them really well

57
00:04:14,900 --> 00:04:18,440
and just have a simple user interface.

58
00:04:18,580 --> 00:04:21,720
So the configuration aspect, what is running,

59
00:04:22,220 --> 00:04:25,620
and then also the post-mortem of that and how that is being reported

60
00:04:25,620 --> 00:04:26,720
and what comes out of it.

61
00:04:27,420 --> 00:04:27,880
I think...

62
00:04:28,240 --> 00:04:31,420
I think overall, Simon, you described it very well.

63
00:04:31,420 --> 00:04:36,280
I'm not sure about the HUD yet.

64
00:04:36,460 --> 00:04:38,300
We definitely will continue to have it.

65
00:04:38,960 --> 00:04:41,220
But it's so new, innovative.

66
00:04:42,060 --> 00:04:44,420
And if you think about it, you know, conceptually,

67
00:04:45,140 --> 00:04:47,880
the HUD is in the browser.

68
00:04:48,220 --> 00:04:51,640
And effectively, you're attacking the application through the browser, right?

69
00:04:51,800 --> 00:04:51,920
Yeah.

70
00:04:52,680 --> 00:04:57,900
So therefore, it kind of like messes with my mind as a pentester.

71
00:04:57,900 --> 00:04:58,220
It's like...

72
00:04:58,240 --> 00:05:00,880
You know, is this, you know, is this a friendly or is this an enemy?

73
00:05:01,220 --> 00:05:04,820
You know, like, am I hacking this or am I configuring it?

74
00:05:04,900 --> 00:05:09,000
But using the browser is definitely something that we want to be using.

75
00:05:09,360 --> 00:05:10,660
Here's a question for you, Simon.

76
00:05:11,080 --> 00:05:14,600
So what would you put...

77
00:05:14,600 --> 00:05:17,480
What would you select from the swing-based GUI?

78
00:05:17,840 --> 00:05:18,660
Well, let's jump...

79
00:05:18,660 --> 00:05:22,380
I'll jump back a little bit because I think you raised one very important point there,

80
00:05:22,440 --> 00:05:26,400
which was the fact that we're going to carry on with the swing-based GUI.

81
00:05:26,400 --> 00:05:27,960
And, you know,

82
00:05:28,240 --> 00:05:29,660
why don't we just replace all of that?

83
00:05:30,280 --> 00:05:31,400
Well, it's a huge job.

84
00:05:31,680 --> 00:05:35,560
There's a huge number of screens, a massive amount of functionality.

85
00:05:36,600 --> 00:05:40,800
And, you know, what we don't want to do is create a new web-based UI

86
00:05:40,800 --> 00:05:42,800
that's a copy of the swing-based UI.

87
00:05:43,580 --> 00:05:44,660
We actually have that already.

88
00:05:45,020 --> 00:05:48,900
So we've got this technology called WebSwing.

89
00:05:49,100 --> 00:05:51,600
So you can actually have ZAP in the browser.

90
00:05:51,880 --> 00:05:54,080
But it is just the swing-based GUI in the browser.

91
00:05:54,200 --> 00:05:55,120
It's really impressive.

92
00:05:55,120 --> 00:05:56,280
It works really well.

93
00:05:56,920 --> 00:05:58,220
But that's not what we're looking for.

94
00:05:58,220 --> 00:06:05,380
You know, what we want to do is have an opportunity to think about the GUI again.

95
00:06:06,040 --> 00:06:10,840
And as you were saying, Yiannis, we want to kind of think about it from very much a simplification.

96
00:06:11,040 --> 00:06:11,780
We don't want to...

97
00:06:11,780 --> 00:06:15,660
You know, we're not going to replace the whole swing-based GUI right now anyway.

98
00:06:16,740 --> 00:06:19,420
And we don't want to just replicate what we've got.

99
00:06:19,540 --> 00:06:25,580
We want a chance to think again about the UI, who's using it, and why they're using it.

100
00:06:25,740 --> 00:06:27,580
And that's one reason we're having this...

101
00:06:28,220 --> 00:06:35,880
This discussion in ZAP Chat, because we're very much looking for feedback from you, the people using ZAP.

102
00:06:36,540 --> 00:06:40,260
So, you know, if you're a hardcore pentester who's using all the ZAP functionality,

103
00:06:40,900 --> 00:06:44,200
this web-based interface isn't going to be for you, at least not for a long time.

104
00:06:45,040 --> 00:06:48,140
But we know we've got a very wide range of users.

105
00:06:48,720 --> 00:06:55,040
So, you know, we think there's quite a few users who use ZAP in quite a simple way,

106
00:06:55,040 --> 00:06:56,560
but they're still using the desktop.

107
00:06:57,640 --> 00:06:58,040
And, you know, so we're not

108
00:06:58,040 --> 00:06:59,300
talking about automation here.

109
00:06:59,720 --> 00:07:01,460
I mean, automation may be the end result of this,

110
00:07:01,960 --> 00:07:08,480
but we're trying to think about the interface, the desktop interface,

111
00:07:08,660 --> 00:07:12,260
as it's used by people who are not so experienced with ZAP

112
00:07:12,260 --> 00:07:15,720
and who are not doing a full-on pentest.

113
00:07:17,160 --> 00:07:22,620
So, you know, some of the things like we know a lot of people go straight to the quick scan,

114
00:07:22,620 --> 00:07:27,980
the quick start pages and say, right, here's a URL, attack it.

115
00:07:28,680 --> 00:07:31,320
You know, and that's...

116
00:07:31,320 --> 00:07:37,480
It's using ZAP in a point-and-shoot way, which is good, but we know there are limitations.

117
00:07:38,360 --> 00:07:41,720
And one of the limitations we know is feedback.

118
00:07:42,460 --> 00:07:45,720
You know, there's a lot of tools out there where you just give them a URL

119
00:07:45,720 --> 00:07:47,900
and they'll attack it and they'll give you the results.

120
00:07:49,060 --> 00:07:51,780
But often they don't do it very effectively.

121
00:07:51,780 --> 00:07:55,800
You know, there's web applications are really complex beasts.

122
00:07:55,980 --> 00:07:58,020
They do so many weird and wonderful things.

123
00:07:59,000 --> 00:08:02,340
So we think feedback is absolutely key.

124
00:08:02,800 --> 00:08:07,980
And one of the advantages of ZAP is that even though you can use it as a point-and-shoot tool,

125
00:08:08,440 --> 00:08:09,460
it's got a lot more depth.

126
00:08:09,600 --> 00:08:12,260
So you can then go in and see what's actually going on

127
00:08:12,260 --> 00:08:17,000
and whether ZAP is attacking your application or understanding

128
00:08:17,000 --> 00:08:18,480
and attacking your application effectively.

129
00:08:18,480 --> 00:08:20,960
And if it isn't, you can then configure it to do so.

130
00:08:22,760 --> 00:08:23,860
It's so true.

131
00:08:24,120 --> 00:08:27,380
And, you know, to be able to, you know, do a scan,

132
00:08:27,380 --> 00:08:30,860
but customize the payloads or make sure authentication works

133
00:08:30,860 --> 00:08:33,740
or verify that the site's tree is up to date,

134
00:08:34,040 --> 00:08:36,840
even if you're using, if you're attacking a modern application.

135
00:08:37,220 --> 00:08:41,320
So these are things that, you know, would serve as a good use case

136
00:08:41,520 --> 00:08:46,060
for the web-based GUI, for the non-advanced, the normal user.

137
00:08:46,880 --> 00:08:51,820
And also it would help drive a simple use case to conclusion

138
00:08:51,980 --> 00:08:56,380
without coming in contact with the standard swing-based GUI.

139
00:08:56,620 --> 00:08:57,320
So that's a 

140
00:08:57,320 --> 00:08:59,100
potential good candidate.

141
00:08:59,540 --> 00:09:01,160
What would a bad candidate be?

142
00:09:01,260 --> 00:09:03,560
Just circling back to what you were saying, Simon.

143
00:09:03,900 --> 00:09:07,920
So, you know, selecting custom fuzzing payloads for parameters.

144
00:09:08,460 --> 00:09:09,700
Fuzzing, yeah, no.

145
00:09:10,740 --> 00:09:12,420
Let's do fuzzing on the web browser.

146
00:09:12,560 --> 00:09:13,400
It's like, no, let's not.

147
00:09:14,740 --> 00:09:17,440
I'm not saying we'll never do that, but at this stage,

148
00:09:17,720 --> 00:09:20,360
we definitely want to look for the simple use cases.

149
00:09:21,000 --> 00:09:21,940
And I think you're right.

150
00:09:22,020 --> 00:09:25,420
It's finding the use cases for a particular type of user

151
00:09:25,420 --> 00:09:27,300
and doing everything for them.

152
00:09:27,400 --> 00:09:29,400


153
00:09:29,400 --> 00:09:32,400
So if you're using ZAP in a relatively simple way,

154
00:09:32,780 --> 00:09:36,560
we're looking to create a web UI that you could use

155
00:09:36,820 --> 00:09:39,040
and not touch the swing-based GUI at all.

156
00:09:39,880 --> 00:09:45,220
And ZAP actually runs in, you can run ZAP without the swing-based UI.

157
00:09:45,640 --> 00:09:50,340
So you'd actually be able to kick ZAP off and have the web-based interface

158
00:09:50,560 --> 00:09:54,720
and do whatever you want and then close ZAP down and never touch the,

159
00:09:54,780 --> 00:09:57,140
never see the web, the swing-based UI.

160
00:09:57,320 --> 00:09:59,360
And obviously you wouldn't have to use the web-based UI

161
00:09:59,360 --> 00:10:00,060
if you're using swing.

162
00:10:00,200 --> 00:10:04,040
So it's kind of, if you've got to use both,

163
00:10:04,100 --> 00:10:05,200
then we've done something wrong.

164
00:10:06,500 --> 00:10:06,580
You know?

165
00:10:06,860 --> 00:10:08,420
You could sequence your use.

166
00:10:08,600 --> 00:10:15,760
So you could fire up the web-based UI, run a basic scan and complete on it,

167
00:10:16,420 --> 00:10:19,420
generate the report and then generate an automation plan, right?

168
00:10:19,440 --> 00:10:20,200
Yeah, exactly.

169
00:10:20,240 --> 00:10:24,660
And feed that into the standard GUI, if you like.

170
00:10:25,180 --> 00:10:26,220
That makes sense.

171
00:10:26,220 --> 00:10:27,280
But running that.

172
00:10:27,280 --> 00:10:27,300


173
00:10:27,300 --> 00:10:31,520
You know, if you're running, if we have a web-based UI to run a basic scan,

174
00:10:31,620 --> 00:10:35,440
select some payloads, do automation and a little bit of authentication, right?

175
00:10:36,540 --> 00:10:41,960
Then, as Simon said, as you said, right, there's no need for you to be using

176
00:10:41,960 --> 00:10:46,360
the actual swing-based GUI and both of them running in parallel.

177
00:10:46,660 --> 00:10:49,420
So those are the kind of use cases that we're after in terms of feedback.

178
00:10:50,400 --> 00:10:53,080
It's also valid to provide feedback and say, you know,

179
00:10:53,380 --> 00:10:57,220
I'm a bounty hunter and I don't envisage ever,

180
00:10:57,220 --> 00:11:00,640
using a web-based GUI, fine, absolutely fine, right?

181
00:11:01,540 --> 00:11:10,300
Or I'm in CI/CD, or I'm doing automation and all the tools that I use have a web-based interface and this is what it looks like, right?

182
00:11:10,560 --> 00:11:13,200
So we're taking that type of feedback on board as well.

183
00:11:13,240 --> 00:11:16,660
I think that's important to say, Simon, for our listeners and our viewers.

184
00:11:17,980 --> 00:11:18,480
Yeah.

185
00:11:18,480 --> 00:11:27,060
And we haven't, this is all in flux, so we haven't decided exactly how we're getting that feedback, but we're probably going to do a blog post on this.

186
00:11:27,380 --> 00:11:31,360
And the ZAP user group is a great place to give that feedback.

187
00:11:31,600 --> 00:11:37,040
Obviously there'd be comments on this YouTube video, Twitter, loads of options.

188
00:11:37,420 --> 00:11:47,600
We may well do some more surveys and things, but we're kind of, yeah, it doesn't matter how you get the feedback to us, get the feedback to us and we'll collate it and go from there.

189
00:11:49,460 --> 00:11:53,880
So that's the first part of this talk, this chat.

190
00:11:54,080 --> 00:11:56,240
So, because what we also want to cover.

191
00:11:56,240 --> 00:12:09,560
Was the actual project we're talking about, because we covered Google Summer of Code last week, but we did, we didn't go into this one in a great deal of detail and that's what we're doing now.

192
00:12:10,480 --> 00:12:21,080
Now we've actually had quite a few, I want to call them students, but some of them may be students, but there's potential candidates for Google Summer of Code, quite a few get in touch already.

193
00:12:21,380 --> 00:12:25,800
And actually one reason, another reason for using web-based technologies is,

194
00:12:26,000 --> 00:12:26,240


195
00:12:26,440 --> 00:12:28,700
there are a lot more people who can then contribute to ZAP.

196
00:12:29,300 --> 00:12:35,360
You know, Java is something that is actually, you know, slowly losing its popularity.

197
00:12:35,960 --> 00:12:36,360
Reckon.

198
00:12:37,400 --> 00:12:37,740
Slowly,

199
00:12:37,740 --> 00:12:39,320
i mean, it's going to carry on for a long time.

200
00:12:39,440 --> 00:12:40,700
It's not, it's not dead yet.

201
00:12:41,600 --> 00:12:52,860
I mean, look at COBOL, but we know that there are a lot of people coming along who know web-based technologies really well, better than we do in the ZAP core team, I have to say.

202
00:12:53,120 --> 00:12:56,120
So this is an opportunity for those people to contribute to ZAP.

203
00:12:56,120 --> 00:12:56,200


204
00:12:56,440 --> 00:12:57,140

205
00:12:57,500 --> 00:12:59,720
And obviously for the Google Summer of Code

206
00:13:00,480 --> 00:13:00,980
it will just be

207
00:13:01,180 --> 00:13:04,080
one candidate who gets chosen, but after that we expect this to

208
00:13:04,080 --> 00:13:05,640
carry on, you know, 

209
00:13:06,020 --> 00:13:09,440
we want to carry on building on top of this GUI and we know 

210
00:13:09,540 --> 00:13:10,040
it's not going 

211
00:13:10,100 --> 00:13:13,820
to be done and dusted and never touched again once the

212
00:13:14,220 --> 00:13:18,160
once the Google Summer of Code is over. So we had a few 

213
00:13:18,960 --> 00:13:20,900
candidates get in touch and 

214
00:13:21,460 --> 00:13:23,940
one of the main their main concerns is 

215
00:13:24,440 --> 00:13:25,220
that they don't know Java.

216
00:13:25,260 --> 00:13:25,920


217
00:13:25,920 --> 00:13:33,160
And in our documentation, which we showed last week, we said that we always like, you pretty

218
00:13:33,160 --> 00:13:38,400
much have to contribute to ZAP in order to be considered as a serious candidate for Google

219
00:13:38,400 --> 00:13:47,360
Summer of Code. And most of the easy issues on ZAP are Java related. We do have both a JavaScript

220
00:13:47,360 --> 00:13:53,920
and a TypeScript project, two projects in ZAP, but they're hard. They're complicated. One of

221
00:13:53,920 --> 00:13:59,580
them is the HUD and the other one is the browser add-on. They do weird things and we don't have

222
00:13:59,580 --> 00:14:07,160
loads of simple bugs or features for you to implement in those. So what are we do?

223
00:14:08,020 --> 00:14:15,600
Well, what we decided was we would like you to, if you're interested in contributing to ZAP and

224
00:14:15,600 --> 00:14:20,120
this web-based GUI project, we would like you to create a proof of concept.

225
00:14:21,220 --> 00:14:23,900
That's embedded to us. Yeah, absolutely. Through a PR request.

226
00:14:23,920 --> 00:14:31,920
Yeah. Now that sounds straightforward. And one advantage of, one really good thing about ZAP is

227
00:14:31,920 --> 00:14:39,580
we've got a very thorough API and that's, it supports a whole load of things. It supports

228
00:14:39,580 --> 00:14:46,400
JSON. So we've got a very powerful JSON API, so you can call that. The problem is if you actually

229
00:14:46,400 --> 00:14:53,900
have a separate process running on a different port, then you won't be able to call the ZAP API.

230
00:14:53,920 --> 00:15:03,760
Due to cross origin request. So there are browser security features that will stop you from calling

231
00:15:03,760 --> 00:15:10,020
a ZAP API. We could relax those, but we really don't want to for security reasons. It just means

232
00:15:10,020 --> 00:15:16,600
ZAP is easier to attack. And we do know that people do try and attack ZAP. So what we decided

233
00:15:16,600 --> 00:15:23,900
to do was create a new ZAP add-on, which is written in Java, but it allows you

234
00:15:23,920 --> 00:15:27,760
to create, or allows anyone to create proof of concept web-based UIs.

235
00:15:29,680 --> 00:15:31,840
So what I'll do is I will.

236
00:15:31,840 --> 00:15:36,480
What I'll do, if you can share the screen and just show us this, and I think this is great because

237
00:15:36,480 --> 00:15:41,360
if I look at the skillset that people use, you know, in React, right, versus the skillset that

238
00:15:41,360 --> 00:15:45,840
you have as a Java developer, completely, absolutely different, right? It's a different.

239
00:15:46,960 --> 00:15:53,760
Yep. So actually what I'm going to do is, so this web UI PoC,

240
00:15:53,920 --> 00:16:01,180
is the PR is open, so it's not been merged yet, but it will be merged very soon. Hopefully there's

241
00:16:01,180 --> 00:16:06,680
good chance by the time you watch this video, it'll be merged. And, but if we go to have a look

242
00:16:06,680 --> 00:16:13,180
at this in my repos, so it's in the ZAP extensions repo, and this is my branch and we'll see,

243
00:16:13,180 --> 00:16:22,580
it actually has a readme and it lend links to the web-based UI GSoC project. Now what you'll need to

244
00:16:22,580 --> 00:16:23,920
do is you will need to set up a

245
00:16:23,920 --> 00:16:28,000
ZAP development environment. You're going to need to do this for the project anyway. You don't need

246
00:16:28,000 --> 00:16:31,680
any Java skills, but you need to set up the development environment. So we've got a link

247
00:16:31,680 --> 00:16:39,200
to the developer guide. Then what you need to do is you need to install this add-on. This add-on will

248
00:16:39,920 --> 00:16:45,680
not be on the ZAP marketplace. And the reason for that is we don't want people, most people

249
00:16:45,680 --> 00:16:50,000
installing this, because there's a good chance there'll be security vulnerabilities in this,

250
00:16:50,000 --> 00:16:53,440
you know, these are proof of concepts. So we do, you know,

251
00:16:53,440 --> 00:16:53,920


252
00:16:53,920 --> 00:16:59,600
is very important for the final project, but for a proof of concept, we'll be, you know,

253
00:16:59,600 --> 00:17:03,840
we'll be a bit more lax about these things. So this isn't something we want people to

254
00:17:03,840 --> 00:17:11,200
be running when they're using ZAP normally at this stage. And in fact, this add-on will not, well,

255
00:17:11,200 --> 00:17:14,400
you can install it in the normal ZAP, but it won't work. It won't do anything interesting.

256
00:17:14,400 --> 00:17:17,440
It has to be this dev version of ZAP for it to do anything interesting.

257
00:17:18,560 --> 00:17:22,080
And then what you do is you point your browser at

258
00:17:22,080 --> 00:17:31,520
localhost 1337. So what I actually have is I do have ZAP running. It's a dev version.

259
00:17:32,080 --> 00:17:40,880
And if we go to manual explore and I have to move the zoom thing so I could actually get to

260
00:17:40,880 --> 00:17:43,280
localhost 1337.

261
00:17:43,280 --> 00:17:51,920
And then what we'll see is you get this very simple page saying it's the ZAP web UI

262
00:17:51,920 --> 00:17:52,000


263
00:17:52,000 --> 00:17:53,760
PoC Server.

264
00:17:53,760 --> 00:18:01,520
And you can actually, we have a link to the ZAP API as well. So this is a web-based interface,

265
00:18:01,520 --> 00:18:07,680
an existing web-based interface to the ZAP API. Now, one thing at the moment,

266
00:18:07,680 --> 00:18:14,000
so let's go and have a look at say core and hosts, and we'll see

267
00:18:14,960 --> 00:18:18,640
just localhost because that's the only thing we've been to. So let's just go to

268
00:18:22,000 --> 00:18:32,240
example.com and then we refresh and we'll see you've got localhost and example.com.

269
00:18:32,240 --> 00:18:40,960
So it really does help to explore a target application using ZAP before you start playing

270
00:18:40,960 --> 00:18:44,320
around with the web UI because otherwise you won't have anything to look at.

271
00:18:45,920 --> 00:18:51,840
So go back to the top level. So that's the link to the API. And what we have

272
00:18:51,840 --> 00:18:57,680
is we have an example PoC. Now this one is actually implemented in JavaScript.

273
00:18:57,680 --> 00:19:05,200
We're really looking for TypeScript. You can submit a PoC in JavaScript, but

274
00:19:06,160 --> 00:19:12,400
TypeScript is definitely preferred, but this actually shows you how to make those requests

275
00:19:13,120 --> 00:19:18,320
because we have, it's really simple. We've got the site tree here. And if you click on these

276
00:19:18,320 --> 00:19:21,760
things, then you'll actually see, we can navigate around.

277
00:19:21,840 --> 00:19:24,880
And if you select anything,

278
00:19:24,880 --> 00:19:30,080
then you will see that we are getting the requests and find something where we get

279
00:19:31,680 --> 00:19:38,960
something there, we get the response as well. So this is a really simple proof of concept

280
00:19:38,960 --> 00:19:43,680
and it was done deliberately, very simple. So it's no frameworks. It's pure JavaScript,

281
00:19:43,680 --> 00:19:45,200
even though it's not what we want in the end.

282
00:19:46,080 --> 00:19:50,960
But it is actually making those API calls. Now, one of the key things here is

283
00:19:51,840 --> 00:19:57,120
every time we expand something, we're getting a new, we're actually requesting,

284
00:19:57,120 --> 00:20:03,040
we're making API requests. So I think it's important for the sites tree. The sites tree

285
00:20:03,040 --> 00:20:10,160
at the moment is pretty small, but we know if you navigate over, you explore a large application,

286
00:20:10,160 --> 00:20:18,240
the sites tree can get massive. And we don't want the GUI to sit there for a few seconds,

287
00:20:18,240 --> 00:20:21,680
loading up the sites tree, and then handling all internally.

288
00:20:21,680 --> 00:20:25,760
It's much better to make these requests and responses dynamically,

289
00:20:25,760 --> 00:20:29,680
particularly as you see, these are pretty quick. You know, it's pretty snappy.

290
00:20:32,080 --> 00:20:37,760
This page is talking directly to ZAP via the API. ZAP gets all the information. It's pulling stuff

291
00:20:37,760 --> 00:20:42,560
out of the database or whatever, or the sites tree and returning it. So we don't think there's

292
00:20:42,560 --> 00:20:47,600
a performance problem with the sites tree like this. So this is, you know,

293
00:20:47,600 --> 00:20:51,600
you do want these kinds of things to be dynamic and this kind of thing shouldn't be cached.

294
00:20:52,560 --> 00:21:00,720
Now, one thing we don't have at the moment is notifications, events from ZAP itself.

295
00:21:00,720 --> 00:21:06,080
So this is something that we will be adding. But for the PoC, you know,

296
00:21:06,080 --> 00:21:09,200
whether it'll be in place for a PoC, I don't know. We'll have to see how it goes,

297
00:21:10,000 --> 00:21:10,880
but we definitely will.

298
00:21:10,880 --> 00:21:14,960
A few pentesters looking at this interface would say, yeah,

299
00:21:14,960 --> 00:21:20,240
this is exactly what I want, right? And it's actually, you know, it's clean, it's concise.

300
00:21:20,240 --> 00:21:21,600
It gives you all the data.

301
00:21:22,160 --> 00:21:26,720
It's not really an interface. I mean, by any means of TypeScript or modern standards,

302
00:21:26,720 --> 00:21:30,240
it's not really an interface. Yes, it gives you the request and response. But if you're a 

303
00:21:30,240 --> 00:21:37,760
pentester, you shouldn't even be firing a browser to get the history of requests and responses, right?

304
00:21:37,760 --> 00:21:42,880
There's a number of ways to get that. So in the concept of this PoC, it's very important to say

305
00:21:42,880 --> 00:21:51,280
that we are after making sure that it has a smooth experience for the user and it's actually able to

306
00:21:51,680 --> 00:22:00,400
use the ZAP APIs in a consistent way, right? In a way that gives that smooth interface view

307
00:22:00,400 --> 00:22:01,520
to the user.

308
00:22:01,520 --> 00:22:06,080
Yeah. And we want it to look good. We want people to enjoy using this interface.

309
00:22:06,080 --> 00:22:09,360
So it's got to look good and work in the way they want it to.

310
00:22:10,160 --> 00:22:14,640
So you've installed, you know, you've set up this app development environment,

311
00:22:14,640 --> 00:22:20,400
and then you've installed this add-on. How can you actually add your own proof of concept?

312
00:22:21,680 --> 00:22:26,400
So, what I'm going to do is just switch to the command line. Now,

313
00:22:27,360 --> 00:22:34,880
I am in, because I've got a Mac, I'm in /user/Simon/Library/Application Support/ZAP_D.

314
00:22:34,880 --> 00:22:42,080
Now, ZAP has a default directory that it uses and it's different on different

315
00:22:42,800 --> 00:22:48,960
operating systems. If I was using standard ZAP, the release version of ZAP, it would just be ZAP

316
00:22:48,960 --> 00:22:50,240
without the underscore d.

317
00:22:50,240 --> 00:22:51,200
But

318
00:22:51,680 --> 00:22:56,840
the underscore D and this is where ZAP puts its files and what you'll see is

319
00:22:56,840 --> 00:23:07,160
there is a web UI PoC directory and there we have we've got the index the

320
00:23:07,160 --> 00:23:12,980
example and you'll actually see the example is a directory. So what I'm going

321
00:23:12,980 --> 00:23:20,180
to do is if you want say you want to create a new PoC proof of concept.. I'm

322
00:23:20,180 --> 00:23:27,160
going to make a directory called Simon and then we go back here and go to the

323
00:23:27,160 --> 00:23:33,140
top level and we'll see we now have a PoC called Simon and a click on there

324
00:23:33,140 --> 00:23:39,380
it'll say 404 not found because it's just directory have a look here and

325
00:23:39,380 --> 00:23:45,080
we see we've actually got an index.html. So we need an index.html. Well, if

326
00:23:45,080 --> 00:23:49,280
you want to serve something from the route anyway. So, I'm just going to use

327
00:23:49,280 --> 00:23:49,820
vi..

328
00:23:50,180 --> 00:24:06,640
You don't have to use vi for this.. No you basically you can use whatever editor or

329
00:24:06,640 --> 00:24:12,520
IDE you want and that's one reason why it's just flat, you know, very simple flat file store

330
00:24:12,520 --> 00:24:18,080
use whatever you like and you know we're expecting you to come back and saying this is the tool chain

331
00:24:18,080 --> 00:24:23,760
that i'm proposing. So we want those details, because we're expecting you to use the modern

332
00:24:23,760 --> 00:24:31,300
frameworks, but i'm just i've just created this very text file it's not even html and refresh

333
00:24:31,300 --> 00:24:36,620
and you see testing one two three and then okay we'll we're gonna go

334
00:24:36,620 --> 00:24:48,000
create a very.. simple non-py script non-java script "hello world"

335
00:24:48,000 --> 00:24:53,960
of index html if you ever want to know how to do this you can also watch this video.

336
00:24:53,960 --> 00:25:02,060
Yep, so really simple.. Even has a header okay very exciting! Yeah, so..

337
00:25:05,060 --> 00:25:12,520
i probably made a mistake there, but hopefully not and then we go back and refresh and there

338
00:25:12,520 --> 00:25:17,980
we go heading one PoC hello world. 

339
00:25:17,980 --> 00:25:26,120
And so i mean so what you'll see is when ZAP has a server is not caching anything. So, you know, any change you make to the file store will get reflected

340
00:25:26,130 --> 00:25:36,860
immediately. So you probably have to refresh the page, but what you can see is you can then very quickly create your own PoC. an what you'll then

341
00:25:36,960 --> 00:25:46,980
need to do is you'll need to copy this your files back and let's go back to... here is so this

342
00:25:47,980 --> 00:25:56,100
is my copy of ZAP extensions where the PR has been submitted to web UI PoC and if we go into

343
00:25:56,100 --> 00:26:07,300
see if i can remember.. So, yeah, ZAP home files so src/main/zapHomeFiles/webuipoc/example.

344
00:26:07,300 --> 00:26:14,700
So you would want to copy.. So to get your proof of concept working you can create the files

345
00:26:14,700 --> 00:26:17,580
in this ZAP home directory and

346
00:26:17,980 --> 00:26:22,320
you can play around with it get it how you like then copy those files back up to

347
00:26:22,320 --> 00:26:29,000
this level so you'd create your directory at the same level as the example then you'd add all those

348
00:26:29,000 --> 00:26:35,040
files and then you'd submit those to PR and you know we want you to do this. So that we can see

349
00:26:35,040 --> 00:26:41,060
you submitting PRs getting feedback and then updating and i said we don't you know if you want

350
00:26:41,060 --> 00:26:46,660
to call some stuff back. So that you know some really cool features that you don't want

351
00:26:46,660 --> 00:26:47,960
other candidates to see

352
00:26:47,980 --> 00:26:54,600
no problem you can submit those to us privately, but you know this is how we do want some one or

353
00:26:54,600 --> 00:26:59,040
more PRs with functionality and so we can see that you understand this process.

354
00:26:59,040 --> 00:27:06,680
I think it's a great idea to be able to have different PR requests as part of you know

355
00:27:06,680 --> 00:27:12,280
showing a PoC as part of this Google Summer of Code, because it just gives you anybody can think

356
00:27:12,280 --> 00:27:17,960
that they're writing, you know, some sort of javascript, typescript PoC, but to be able to

357
00:27:17,980 --> 00:27:24,900
solve a UI feature, right, for a ZAP user and we know who those are based on the personas

358
00:27:24,900 --> 00:27:31,840
questionnaire and we're still running that etc. is is important because when it comes to a lot

359
00:27:31,840 --> 00:27:37,500
of modern web interfaces, you know. I'm thinking of like even my bank or parts of the google

360
00:27:37,500 --> 00:27:43,280
website or amazon and so on there's a lot of a lot of stuff happening in the interface that's

361
00:27:43,280 --> 00:27:47,600
actually not needed, right? You just need a button and the button is,

362
00:27:47,980 --> 00:27:53,380
you know, something else you know it's straight out and then it has a state of its own and all

363
00:27:53,380 --> 00:28:00,000
that stuff. So to be able to, you know, find the balance for the web-based UI that we will have

364
00:28:00,000 --> 00:28:07,200
through PR requests and also help drive that in the future will definitely set the brain juices

365
00:28:07,200 --> 00:28:11,860
of innovation running for us as a team, right as soon as we see those PR requests. Yeah. So don't

366
00:28:11,860 --> 00:28:17,960
shy away from submitting your PR request. Definitely and you know for if you

367
00:28:17,980 --> 00:28:23,260
do want to take part in Google Summer of Code you will need to submit a proposal which i think

368
00:28:23,260 --> 00:28:29,480
ends up as so it's like a Google DOC or something ends up as a pdf and we do want to

369
00:28:29,480 --> 00:28:36,180
hear about your ideas of how the interface could work, you know, the type of functionality, wireframes

370
00:28:36,180 --> 00:28:41,620
how it fits together, write pretty pictures if you want, you know, example pictures of how you

371
00:28:41,620 --> 00:28:47,580
think it would work. We want to get listen to your good ideas and you know the more ideas you have

372
00:28:47,980 --> 00:28:53,240
the, you know, the better they are the more chance you'll have of being successful in this project.

373
00:28:53,240 --> 00:29:04,800
Exactly as somebody likes to say. Yep, so i think that's it. That was all about the new web-based

374
00:29:04,800 --> 00:29:12,900
UI the proposed web-based web-based UI a trip over my words now. So if you are a ZAP user use

375
00:29:12,900 --> 00:29:17,860
the desktop and you don't use that many of the features then please get in touch with us

376
00:29:17,980 --> 00:29:24,500
to let us know exactly what you would like us to provide and if you're thinking about

377
00:29:24,500 --> 00:29:29,760
getting involved in Google Summer of Code would like to work on the web-based UI

378
00:29:29,760 --> 00:29:36,020
project, then please start playing around with creating PoCs, get in touch particularly by the

379
00:29:36,020 --> 00:29:41,340
ZAP developer group, if you have any questions about developing stuff for ZAP or any questions

380
00:29:41,340 --> 00:29:47,340
or problems or you need new APIs created anything like that. We can help you there

381
00:29:47,980 --> 00:29:53,500
and if you've got any more comments about this or any of the other episodes of ZAP Chat then

382
00:29:53,500 --> 00:29:57,380
please leave them in the comments below. Thank you very much. Thank you.

